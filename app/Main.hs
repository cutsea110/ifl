module Main where

import System.Environment (getArgs)
import System.IO (getContents, hPutStr, hPutStrLn, stdout, stderr)

-- import Template.Mark1 (parse, compile, eval, showResults)
-- import Template.Mark2 (parse, compile, eval, showResults)
-- import Template.Mark3 (parse, compile, eval, showResults)
import Template.Mark4 (parse, compile, eval, showResults)

exec :: String -> IO ()
exec = putStrLn . showResults . eval . compile . parse

printHelp :: IO ()
printHelp = do
  -- This banner generated by using 'figlet -f slant IFL'
  hPutStr stderr $ unlines [ "    ____________"
                           , "   /  _/ ____/ /"
                           , "   / // /_  / /"
                           , " _/ // __/ / /___"
                           , "/___/_/   /_____/ Implimenting Functional Languages"
                           , ""
                           , "> cabal v2-run ifl <file-path>"
                           ]

run :: FilePath -> IO ()
run file = do
  hPutStrLn stderr $ "Program Source: " ++ file
  exec =<< readFile file

main :: IO ()
main = do
  args <- getArgs
  if null args then printHelp
    else run $ head args
