module Main where

import System.Environment (getArgs)
import System.IO (getContents, hPutStr, hPutStrLn, stdout, stderr)

import qualified Template.Mark4 as Mark4 (parse, compile, eval, showResults)

type Arguments = [String]

class Compiler c where
  exec :: c -> String -> IO ()

data Mk4 = Mk4
instance Compiler Mk4 where
  exec _ = putStrLn . Mark4.showResults . Mark4.eval . Mark4.compile . Mark4.parse

run :: Arguments -> IO ()
run (file:_) = do
  hPutStrLn stderr $ "Program Source: " ++ file
  exec Mk4 =<< readFile file

printHelp :: IO ()
printHelp = do
  -- This banner generated by using 'figlet -f slant IFL'
  hPutStr stderr $ unlines [ "    ____________"
                           , "   /  _/ ____/ /"
                           , "   / // /_  / /"
                           , " _/ // __/ / /___"
                           , "/___/_/   /_____/ Implimenting Functional Languages"
                           , ""
                           , "> cabal v2-run ifl <file-path>"
                           ]

main :: IO ()
main = do
  args <- getArgs
  if null args then printHelp
    else run args
